#!/usr/bin/env node

/**
 * Module dependencies.
 */

var WebSocket = require('ws');
var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var io = require('socket.io')(http);
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
let hashName={}
/**
 * Listen on provided port, on all network interfaces.
 */

var wss = new WebSocket.Server({server});//websocket
wss.on('connection', function connection(ws,req) {
    console.log('链接成功！');
    const ip = req.connection.remoteAddress;
    ws.on('message', function (jsonStr, flags) {
        var obj = eval('(' + jsonStr + ')');
        obj.ip=ip;
        wss.broadcast(1, obj);

        // wss.clients.forEach(function each(client) {
        //     // client.send(`你是第 ${wss.clients.size}位`);
        //
        // });
    });
});
wss.broadcast = function broadcast(s, ws) {
    wss.clients.forEach(function each(client) {
        if (s == 1) {
            if (ws.name.indexOf('o')>-1){
                console.log(client)
            }
            client.send(ws.name + ":" + ws.ip);
            client.send(`你是第 ${wss.clients.size}位`);
        }
        if (s == 0) {
            client.send(ws + "退出聊天室");
        }
    });
};
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
